{"version":3,"file":"static/js/387.088717ee.chunk.js","mappings":"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","sources":["components/App.styled.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/service/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 1200px;\n  padding-top: 40px;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Section = styled.section`\n  position: relative;\n  background-color: #fff;\n  margin-top: 4.6875rem;\n  /* padding-top: 30px; */\n`;\n","import styled from '@emotion/styled';\n\nexport const Section = styled.div`\n  padding-right: 15px;\n  padding-left: 15px;\n`;\nexport const CastTitle = styled.h3`\n  font-family: Helvetica Neue;\n  font-weight: 500;\n  font-size: 1.25rem;\n  letter-spacing: 0;\n  line-height: 1.2;\n  padding-left: 9px;\n  text-transform: uppercase;\n  margin-top: 10px;\n  margin-bottom: 1em;\n  text-decoration: underline 3px;\n  text-underline-offset: 8px; /* Зсув лінії від тексту на 5 пікселів */\n  text-decoration-color: red; /* Колір підкреслення заголовка */\n  &:before {\n    position: absolute;\n    content: '';\n    height: 1.1em;\n    border-left: 3px solid #fff;\n    margin: -1px 0 0 -9px;\n  }\n`;\n\nexport const CastList = styled.ul`\n  list-style: none;\n  padding: 0px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  /* justify-content: space-between; */\n`;\n\nexport const CastItem = styled.li`\n  width: 170px;\n`;\nexport const Thumb = styled.div`\n  height: 255px;\n  width: 177px;\n  overflow: hidden;\n`;\nexport const ActorImg = styled.img`\n  /* width: 100%;\n  height: auto; */\n  display: block;\n  height: 100%;\n  width: 100%;\n\n  object-fit: cover;\n`;\n\nexport const ActorName = styled.p`\n  font-size: 14px;\n  font-weight: 600;\n`;\n\nexport const Character = styled.p`\n  font-size: 10px;\n  font-weight: 400;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getCastInfo } from 'components/service/api';\nimport { toast } from 'react-toastify';\nimport Spinner from 'components/Loader/Loader';\nimport {\n  Section,\n  CastTitle,\n  CastList,\n  CastItem,\n  ActorImg,\n  ActorName,\n  Character,\n} from './Cast.styled';\nimport noImage from '../../images/noImage.png';\nimport { Container } from 'components/App.styled';\nimport { Thumb } from 'components/Cast/Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n    setLoading(true);\n    getCastInfo(movieId)\n      .then(data => {\n        setCast(data.cast);\n        // console.log(data.cast);\n      })\n      .catch(error => {\n        setError(error);\n        console.log(error);\n        toast(error.message);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {loading ? (\n        <Spinner />\n      ) : (\n        <Section>\n          <Container>\n            {error && <p>{error}</p>}\n            <CastTitle>Cast and Crew</CastTitle>\n            <CastList>\n              {cast.map(({ credit_id, profile_path, name, character }) => (\n                <CastItem key={credit_id}>\n                  <Thumb>\n                    <ActorImg\n                      src={\n                        profile_path\n                          ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                          : noImage\n                      }\n                      alt=\"preview\"\n                    />\n                  </Thumb>\n\n                  <ActorName>{name}</ActorName>\n                  <Character>Character:{character}</Character>\n                </CastItem>\n              ))}\n            </CastList>\n          </Container>\n        </Section>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\nexport const SpinnerContainer = styled.div`\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n`;\n","import { ColorRing } from 'react-loader-spinner';\nimport { SpinnerContainer } from './Loader.styled';\n\nfunction Spinner() {\n  return (\n    <SpinnerContainer>\n      <ColorRing\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"blocks-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"blocks-wrapper\"\n        colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n      />\n    </SpinnerContainer>\n  );\n}\n\nexport default Spinner;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'b88a81f4023f887d7c5099f96529b634',\n    language: 'en-US',\n  },\n});\n\nexport async function getTrendingMovies() {\n  const query = `movie/popular`;\n  try {\n    const { data } = await instance.get(query);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function getMovieDetails(id) {\n  const query = `/movie/${id}`;\n  try {\n    const { data } = await instance.get(query);\n    // console.log(data);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getCastInfo(id) {\n  const query = `/movie/${id}/credits`;\n  try {\n    const { data } = await instance.get(query);\n    // console.log(data);\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieReviews(id) {\n  const query = `/movie/${id}/reviews`;\n  try {\n    const { data } = await instance.get(query);\n    // console.log(data);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieByName(queryString) {\n  const query = `/search/movie?query=${queryString}`;\n  try {\n    const { data } = await instance.get(query);\n    console.log(data);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":["Container","styled","Section","CastTitle","CastList","CastItem","Thumb","ActorImg","ActorName","Character","movieId","useParams","useState","cast","setCast","loading","setLoading","error","setError","useEffect","getCastInfo","then","data","catch","console","log","toast","message","finally","map","credit_id","profile_path","name","character","src","noImage","alt","SpinnerContainer","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","instance","axios","baseURL","params","api_key","language","getTrendingMovies","get","results","getMovieDetails","id","query","getMovieReviews","getMovieByName","queryString"],"sourceRoot":""}